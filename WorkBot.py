import telebot
from telebot import types
import sqlite3
from datetime import datetime

from token_id import id_admin, TOKEN # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ñ–∞–π–ª–µ token_id.py –∏—Ö –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å
                                     # —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ (—Å–º. README.md)
from works import WORKS

# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('salary.db')
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id INTEGER PRIMARY KEY,
                      username TEXT,
                      first_name TEXT,
                      last_name TEXT,
                      register_date TEXT)''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞–±–æ—Ç
    cursor.execute('''CREATE TABLE IF NOT EXISTS works
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER,
                      work_type TEXT,
                      price INTEGER,
                      date TEXT,
                      month INTEGER,
                      year INTEGER,
                      FOREIGN KEY(user_id) REFERENCES users(user_id))''')

    # –¢–∞–±–ª–∏—Ü–∞ –º–µ—Å—è—á–Ω—ã—Ö –∏—Ç–æ–≥–æ–≤
    cursor.execute('''CREATE TABLE IF NOT EXISTS monthly_totals
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER,
                      month INTEGER,
                      year INTEGER,
                      total INTEGER,
                      save_date TEXT,
                      FOREIGN KEY(user_id) REFERENCES users(user_id))''')

    conn.commit()
    conn.close()


init_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
MAIN_MENU = 0
WORK_MENU = 1
ADD_WORK_MENU = 2

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_or_create_user(user_id, username, first_name, last_name):
    conn = sqlite3.connect('salary.db')
    cursor = conn.cursor()

    cursor.execute("SELECT user_id FROM users WHERE user_id=?", (user_id,))
    if not cursor.fetchone():
        register_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("INSERT INTO users VALUES (?, ?, ?, ?, ?)",
                       (user_id, username, first_name, last_name, register_date))
        conn.commit()

    conn.close()


def add_work(user_id, work_type):
    conn = sqlite3.connect('salary.db')
    cursor = conn.cursor()

    price = WORKS[work_type]
    now = datetime.now()
    date_str = now.strftime("%Y-%m-%d %H:%M:%S")
    month = now.month
    year = now.year

    cursor.execute("INSERT INTO works (user_id, work_type, price, date, month, year) VALUES (?, ?, ?, ?, ?, ?)",
                   (user_id, work_type, price, date_str, month, year))

    conn.commit()
    conn.close()
    return price


def get_month_total(user_id):
    conn = sqlite3.connect('salary.db')
    cursor = conn.cursor()

    now = datetime.now()
    cursor.execute("SELECT SUM(price) FROM works WHERE user_id=? AND month=? AND year=?",
                   (user_id, now.month, now.year))
    total = cursor.fetchone()[0] or 0

    conn.close()
    return total


def get_all_time_total(user_id):
    conn = sqlite3.connect('salary.db')
    cursor = conn.cursor()

    cursor.execute("SELECT SUM(price) FROM works WHERE user_id=?", (user_id,))
    works_total = cursor.fetchone()[0] or 0

    cursor.execute("SELECT SUM(total) FROM monthly_totals WHERE user_id=?", (user_id,))
    monthly_total = cursor.fetchone()[0] or 0

    conn.close()
    return works_total + monthly_total


def save_month(user_id):
    conn = sqlite3.connect('salary.db')
    cursor = conn.cursor()

    now = datetime.now()
    month = now.month
    year = now.year
    save_date = now.strftime("%Y-%m-%d %H:%M:%S")

    total = get_month_total(user_id)

    if total > 0:
        cursor.execute("INSERT INTO monthly_totals (user_id, month, year, total, save_date) VALUES (?, ?, ?, ?, ?)",
                       (user_id, month, year, total, save_date))

        cursor.execute("DELETE FROM works WHERE user_id=? AND month=? AND year=?",
                       (user_id, month, year))

        conn.commit()
        conn.close()
        return total

    conn.close()
    return 0


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_states[user_id] = MAIN_MENU

    get_or_create_user(user_id, message.from_user.username,
                       message.from_user.first_name, message.from_user.last_name)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "üí∞ –ù–∞—á–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç",
        "üìä –ò—Ç–æ–≥ –∑–∞ –º–µ—Å—è—Ü",
        "‚è≥ –ò—Ç–æ–≥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"
    ]
    markup.add(*[types.KeyboardButton(btn) for btn in buttons])

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
def info(message):
    text = (
        "üìå –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏ –∑–∞—Ä–ø–ª–∞—Ç—É\n\n"
        "üîπ –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ 'üí∞ –ù–∞—á–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç'\n"
        "üîπ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ - 'üìä –ò—Ç–æ–≥ –∑–∞ –º–µ—Å—è—Ü'\n"
        "üîπ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - '‚è≥ –ò—Ç–æ–≥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è'\n\n"
        "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
    )
    bot.send_message(message.chat.id, text)


@bot.message_handler(func=lambda message: message.text == "üí∞ –ù–∞—á–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç")
def start_calculation(message):
    user_id = message.from_user.id
    user_states[user_id] = WORK_MENU

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Å—è—Ü", "üîô –ù–∞–∑–∞–¥"]
    markup.add(*[types.KeyboardButton(btn) for btn in buttons])

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É")
def add_work_menu(message):
    user_id = message.from_user.id
    user_states[user_id] = ADD_WORK_MENU

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = list(WORKS.keys()) + ["üîô –ù–∞–∑–∞–¥"]
    markup.add(*[types.KeyboardButton(btn) for btn in buttons])

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É:", reply_markup=markup)


@bot.message_handler(
    func=lambda message: user_states.get(message.from_user.id) == ADD_WORK_MENU and message.text in WORKS)
def process_work(message):
    user_id = message.from_user.id
    work_type = message.text
    price = add_work(user_id, work_type)

    month_total = get_month_total(user_id)
    all_time_total = get_all_time_total(user_id)

    response = (
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {work_type} - {price} —Ä—É–±.\n"
        f"üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {month_total} —Ä—É–±.\n"
        f"‚è≥ –í—Å–µ–≥–æ: {all_time_total} —Ä—É–±."
    )
    bot.send_message(message.chat.id, response)


@bot.message_handler(func=lambda message: message.text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Å—è—Ü")
def process_save_month(message):
    user_id = message.from_user.id
    saved_amount = save_month(user_id)

    if saved_amount > 0:
        response = (
            f"üíæ –ú–µ—Å—è—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
            f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {saved_amount} —Ä—É–±.\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –º–µ—Å—è—Ü."
        )
    else:
        response = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü."

    bot.send_message(message.chat.id, response)


@bot.message_handler(func=lambda message: message.text == "üìä –ò—Ç–æ–≥ –∑–∞ –º–µ—Å—è—Ü")
def show_month_total(message):
    user_id = message.from_user.id
    total = get_month_total(user_id)
    bot.send_message(message.chat.id, f"üìä –ò—Ç–æ–≥ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {total} —Ä—É–±.")


@bot.message_handler(func=lambda message: message.text == "‚è≥ –ò—Ç–æ–≥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è")
def show_all_time_total(message):
    user_id = message.from_user.id
    total = get_all_time_total(user_id)
    bot.send_message(message.chat.id, f"‚è≥ –û–±—â–∏–π –∏—Ç–æ–≥ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {total} —Ä—É–±.")


@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def back_handler(message):
    user_id = message.from_user.id
    current_state = user_states.get(user_id, MAIN_MENU)

    if current_state == ADD_WORK_MENU:
        user_states[user_id] = WORK_MENU
        start_calculation(message)
    elif current_state == WORK_MENU:
        user_states[user_id] = MAIN_MENU
        start(message)
    else:
        start(message)


@bot.message_handler(commands=['cleardb'])
def clear_database(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—É–∫–∞–∂–∏—Ç–µ –≤–∞—à ID)
    if message.from_user.id == id_admin:
        conn = sqlite3.connect('salary.db')
        cursor = conn.cursor()

        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("DELETE FROM works")
        cursor.execute("DELETE FROM monthly_totals")
        cursor.execute("DELETE FROM users")

        conn.commit()
        conn.close()

        bot.reply_to(message, "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!")
    else:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)